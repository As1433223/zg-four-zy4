// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: zy4_proto/server.proto

package zy4_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServerRpc_UserLogin_FullMethodName = "/proto.ServerRpc/UserLogin"
	ServerRpc_EsIkIndex_FullMethodName = "/proto.ServerRpc/EsIkIndex"
)

// ServerRpcClient is the client API for ServerRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerRpcClient interface {
	// todo: 登录
	UserLogin(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginRes, error)
	// todo: esIK分词器索引
	EsIkIndex(ctx context.Context, in *EsIkIndexReq, opts ...grpc.CallOption) (*EsIkIndexRes, error)
}

type serverRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewServerRpcClient(cc grpc.ClientConnInterface) ServerRpcClient {
	return &serverRpcClient{cc}
}

func (c *serverRpcClient) UserLogin(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginRes, error) {
	out := new(UserLoginRes)
	err := c.cc.Invoke(ctx, ServerRpc_UserLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverRpcClient) EsIkIndex(ctx context.Context, in *EsIkIndexReq, opts ...grpc.CallOption) (*EsIkIndexRes, error) {
	out := new(EsIkIndexRes)
	err := c.cc.Invoke(ctx, ServerRpc_EsIkIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerRpcServer is the server API for ServerRpc service.
// All implementations must embed UnimplementedServerRpcServer
// for forward compatibility
type ServerRpcServer interface {
	// todo: 登录
	UserLogin(context.Context, *UserLoginReq) (*UserLoginRes, error)
	// todo: esIK分词器索引
	EsIkIndex(context.Context, *EsIkIndexReq) (*EsIkIndexRes, error)
	mustEmbedUnimplementedServerRpcServer()
}

// UnimplementedServerRpcServer must be embedded to have forward compatible implementations.
type UnimplementedServerRpcServer struct {
}

func (UnimplementedServerRpcServer) UserLogin(context.Context, *UserLoginReq) (*UserLoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedServerRpcServer) EsIkIndex(context.Context, *EsIkIndexReq) (*EsIkIndexRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EsIkIndex not implemented")
}
func (UnimplementedServerRpcServer) mustEmbedUnimplementedServerRpcServer() {}

// UnsafeServerRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerRpcServer will
// result in compilation errors.
type UnsafeServerRpcServer interface {
	mustEmbedUnimplementedServerRpcServer()
}

func RegisterServerRpcServer(s grpc.ServiceRegistrar, srv ServerRpcServer) {
	s.RegisterService(&ServerRpc_ServiceDesc, srv)
}

func _ServerRpc_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerRpcServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerRpc_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerRpcServer).UserLogin(ctx, req.(*UserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerRpc_EsIkIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EsIkIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerRpcServer).EsIkIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerRpc_EsIkIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerRpcServer).EsIkIndex(ctx, req.(*EsIkIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerRpc_ServiceDesc is the grpc.ServiceDesc for ServerRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ServerRpc",
	HandlerType: (*ServerRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogin",
			Handler:    _ServerRpc_UserLogin_Handler,
		},
		{
			MethodName: "EsIkIndex",
			Handler:    _ServerRpc_EsIkIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zy4_proto/server.proto",
}
